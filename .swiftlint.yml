disabled_rules: # rule identifiers to exclude from running
  - colon
  - comma
  - control_statement
  - multiple_closures_with_trailing_closure
  - identifier_name
opt_in_rules: # some rules are only opt-in
  - empty_count
  - yoda_condition
  - vertical_parameter_alignment_on_call
  - fatal_error_message
  - prohibited_super_call
  - overridden_super_call
  - override_in_extension
  - sorted_first_last
  - sorted_imports
  - explicit_self
  # Find all the available rules by running:
  # swiftlint rules
included: # paths to include during linting. `--path` is ignored if present.
  - PoliticalDebateApp_iOS
excluded: # paths to ignore during linting. Takes precedence over `included`.
  - Carthage
  - Pods
#  - Source/ExcludedFolder
#  - Source/ExcludedFile.swift
#  - Source/*/ExcludedFile.swift # Exclude files with a wildcard
analyzer_rules: # Rules run by `swiftlint analyze` (experimental)
#  - explicit_self

# configurable rules can be customized from this configuration file
# binary rules can set their severity level
force_cast: warning # implicitly
force_try:
  severity: warning # explicitly
# rules that have both warning and error levels, can set just the warning level
# implicitly
line_length: 175
# they can set both implicitly with an array
type_body_length:
  - 300 # warning
  - 400 # error
# or they can set both explicitly
file_length:
  warning: 500
  error: 1200
# naming rules can set warnings/errors for min_length and max_length
# additionally they can set excluded names
type_name:
  min_length: 3 # only warning
  max_length: # warning and error
    warning: 40
    error: 50
  excluded: iPhone # excluded via string
identifier_name:
  min_length: # only min_length
    error: 4 # only error
  excluded: # excluded via string array
    - id
    - URL
    - GlobalAPIKey
reporter: "xcode" # reporter type (xcode, json, csv, checkstyle, junit, html, emoji, sonarqube, markdown)

custom_rules:
   empty_line_after_super:
      name: "Empty Line After Super"
      regex: '(^ *super\.[ a-zA-Z0-9=?.\(\)\{\}:,><!]*\n *(?!(?:\}|return))\S+)'
      message: "There should be an empty line after super"
      severity: error
   unnecessary_type:
      name: "Unnecessary Type"
      regex: '[ a-zA-Z0-9]*(?:let|var) [ a-zA-Z0-9]*: ([a-zA-Z0-9]*)[\? ]*= \1'
      message: "Type definition not needed"
      severity: error
   empty_line_after_guard:
      name: "Empty Line After Guard"
      regex: '(^ *guard[ a-zA-Z0-9=?.\(\),><!]*\{[ a-zA-Z0-9=?.\(\),><!]*\}\n *(?!(?:return|guard))\S+)'
      message: "There should be an empty line after a guard"
      severity: error
